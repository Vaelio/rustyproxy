// Copyright 2018 Google LLC
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

use clap::Parser;
use service::{init_tracing, ApiServiceClient, OrderByEnum};
use std::{net::SocketAddr, time::Duration};
use tarpc::{client, context, tokio_serde::formats::Bincode};
use tokio::time::sleep;
use tracing::Instrument;

#[derive(Parser)]
struct Flags {
    /// Sets the server address to connect to.
    #[clap(long)]
    server_addr: SocketAddr,
    /// Sets the page number.
    #[clap(long)]
    page: usize,
    /// Sets the pagesize.
    #[clap(long)]
    pagesize: usize,
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let flags = Flags::parse();
    let tracer_provider = init_tracing("Tarpc Example Client")?;

    let mut transport = tarpc::serde_transport::tcp::connect(flags.server_addr, Bincode::default);
    transport.config_mut().max_frame_length(usize::MAX);

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let client = ApiServiceClient::new(client::Config::default(), transport.await?).spawn();

    let entry = client.get_history_entry(context::current(), 10 as usize)
    .instrument(tracing::info_span!("GetEntry"))
    .await;

    match entry {
        Ok(entry) => tracing::info!("{entry:?}"),
        Err(e) => tracing::warn!("{:?}", anyhow::Error::from(e)),
    }

    let entries = client.list_history_entries(context::current(), 0, flags.pagesize, OrderByEnum::Desc)
    .instrument(tracing::info_span!("listEntries"))
    .await;

    match entries {
        Ok(entries) => tracing::info!("{entries:?}"),
        Err(e) => tracing::warn!("{:?}", anyhow::Error::from(e)),
    }

    let count = client.count_history_entries(context::current())
    .instrument(tracing::info_span!("countEntries"))
    .await;

    match count {
        Ok(count) => tracing::info!("{count:?}"),
        Err(e) => tracing::warn!("{:?}", anyhow::Error::from(e)),
    }
    // Let the background span processor finish.
    sleep(Duration::from_micros(1)).await;
    tracer_provider.shutdown()?;

    Ok(())
}
